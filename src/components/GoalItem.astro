---
import { Goal } from "../lib/supabase";
import GoalSocialIndicator from "./GoalSocialIndicator.astro";

const goal = Astro.props.goal as Goal;
const name = Astro.cookies.get("name")?.value;

let completedTime = goal.completed
  ? new Date(goal.completed).toLocaleString()
  : null;
if (completedTime) {
  // remove seconds and date from completed time showing just time of day. show am or pm
  const isPm = completedTime.includes("PM");
  completedTime = completedTime.split(" ")[1];
  completedTime = completedTime.slice(0, completedTime.lastIndexOf(":"));
  completedTime += isPm ? "pm" : "am";
}
---

<RootElement data={{ goal, name }}>
  <div class="grid grid-cols-4 gap-4 items-center py-2">
    <div class="col-span-1">
      <span class="capitalize text-green-400">{goal.goal}</span>
      {goal.started && !goal.completed && <GoalSocialIndicator goal={goal} />}
    </div>
    <div class="col-span-1 text-center">
      <span data-target="stopwatch" class="text-green-400">00:00:00</span>
    </div>
    <div class="col-span-2 flex justify-end space-x-2">
      {
        goal.started && !goal.completed && (
          <button
            data-target="pause-toggle"
            class="bg-gray-700 text-green-400 border border-green-400 px-2 py-1 rounded-lg w-24"
          >
            {!goal.paused ? "Pause" : "Resume"}
          </button>
        )
      }
      {
        !goal.completed && (
          <button
            data-target="start-finish"
            class="bg-gray-700 text-green-400 border border-green-400 px-2 py-1 rounded-lg w-24"
          >
            {!goal.started ? `Start` : "Finish"}
          </button>
        )
      }
      {
        goal.completed && (
          <div class="text-green-400 w-24 text-center">
            Done!{" "}
            <span class="text-xs text-gray-500 mt-1">{completedTime}</span>
          </div>
        )
      }
    </div>
  </div>

  <script>
    import { navigate } from "astro:transitions/client";
    import { supabase, Goal } from "../lib/supabase";

    RootElement.ready(($, ctx) => {
      var goal = ctx.data.goal as Goal;

      timerUpdate();

      const elem = $.optional<HTMLButtonElement>(`start-finish`);
      elem?.addEventListener("click", async () => {
        elem.disabled = true;
        elem.classList.add("opacity-50");
        // console.log(elem.innerHTML, goal.id);
        // console.log("a", $.self.getAttribute("data-test"));

        if (!goal.started) {
          goal.started = new Date().toISOString();
          goal.paused = false;
          goal.resumed = goal.started;
          goal.duration = 0;
          // timerUpdate(true);
          // goal.resumed = goal.started;
        } else {
          goal.duration = getDuration(goal);
          goal.paused = false;
          goal.resumed = null;
          goal.completed = new Date().toISOString();

          // send message to Supabase
          const message = `${ctx.data.name} completed ${goal.goal} in ${formatDuration(goal)}`;
          const { data, error } = await supabase
            .from("messages")
            .insert([{ content: message, profile_id: goal.uid }]);
        }

        console.log("goal", goal);
        const { data, error } = await supabase
          .from("goals")
          .update(goal)
          .match({ id: goal.id })
          .select();

        if (error) {
          console.error("Error updating goal:", error);
          return;
        }

        navigate("/");
        // window.location.reload();
        // push navigation to /
        // old  window.history.replaceState({}, "", "/");
        // updateStopwatch(goal);
      });

      // Handle pause-toggle button toggle click
      const pauseToggle = $.optional<HTMLButtonElement>(`pause-toggle`);
      pauseToggle?.addEventListener("click", async () => {
        pauseToggle.disabled = true;
        pauseToggle.classList.add("opacity-50");

        const dur = getDuration(goal); // must be calc before we pause
        goal.paused = !goal.paused;

        if (goal.paused) {
          goal.resumed = null;

          // in seconds
          // const now = new Date();
          console.log("goal", goal);
          // const resumedDate = new Date(goal.resumed || goal.started || "");
          goal.duration = dur;
          console.log("Paused duration:", goal.duration);
        } else {
          goal.resumed = new Date().toISOString();
        }

        const { data, error } = await supabase
          .from("goals")
          .update(goal)
          .match({ id: goal.id })
          .select();

        if (error) {
          console.error("Error updating goal:", error);
          return;
        }

        // Object.assign(goal, data[0]);
        navigate("/");
        // window.location.reload();
      });

      function timerUpdate() {
        const stopwatch = $(`stopwatch`);
        if (!stopwatch) return;

        stopwatch.textContent = formatDuration(goal);
        if (!goal.started || goal.paused || goal.completed) return;

        const intervalId = setInterval(() => {
          stopwatch.textContent = formatDuration(goal);
        }, 500);

        return intervalId;
      }
    });

    function formatDuration(goal: Goal) {
      const diff = getDuration(goal);

      const hours = Math.floor(diff / 3600);
      const minutes = Math.floor((diff % 3600) / 60);
      const seconds = diff % 60;

      // format as 00:00:00
      return `${hours.toString().padStart(2, "0")}:${minutes
        .toString()
        .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
    }

    function getDuration(goal: Goal) {
      const duration = goal.duration;

      let diff = duration;
      if (!goal.paused && goal.started && !goal.completed) {
        const lastStartedDate = goal.resumed as string;
        const now = new Date();
        const startedDate = new Date(lastStartedDate);
        diff += Math.floor((now.getTime() - startedDate.getTime()) / 1000);
      }

      return diff;
    }
  </script>
</RootElement>
