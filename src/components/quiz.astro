---
export interface Option {
  id: string;
  text: string;
}

export interface Question {
  type: string;
  category: string;
  subcategory: string;
  difficulty: string;
  clinicalScenario: string;
  question: string;
  options: Option[];
  correctAnswer: string;
  rationale: Record<string, string>;
  nextSteps: string[];
}

export interface Props {
  question: Question;
}

let answer: string | null = null;
let incorrectAnswer: string | null = null;

if (Astro.request.method === "POST") {
  const body = await Astro.request.formData();
  const selected = body.get("goal") as string;
  if (selected === Astro.props.question.correctAnswer) {
    console.log("Correct!");
    answer = selected;
  } else {
    console.log("Incorrect!");
    incorrectAnswer = selected;
    answer = Astro.props.question.correctAnswer;
  }
}

const { question } = Astro.props;
---

<style>
  #al_answer {
    color: #2ecc71;
    font-weight: bold;
  }
  #al_incorrect {
    color: #e74c3c;
    font-weight: bold;
  }
  #question {
    margin: 0rem auto 1rem auto;
    text-align: left;
    overflow-wrap: break-word;
    word-break: break-word;
    background-color: #fff;
    border-radius: 8px;
    width: auto;
    padding: 1rem 1rem 1rem 1rem;
    position: relative;
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);
  }

  h2 {
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: bold;
  }
  #answers {
    margin: 1rem auto 0 auto;
  }
  #answers label {
    margin-right: 1rem;
    cursor: pointer;
  }
  #answers input[type="radio"] {
    margin-right: 0.5rem;
    margin-bottom: 1rem;
    line-height: 1rem;
    transform: scale(1.5);
    cursor: pointer;
    font-size: 16px;
  }

  #submit {
    margin-top: 1rem;
    background-color: #f1c40f;
    color: #fff;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
  }
  #submit:hover {
    background-color: #f39c12;
  }

  .question_text {
    font-family: "IBM Plex Mono", "Roboto";
    letter-spacing: normal;
    line-height: 24px;
    font-size: 18px;
    font-weight: 500;
  }
  .question_text_sub {
    letter-spacing: normal;
    line-height: 24px;
    font-size: 16px;
    font-weight: 600;
  }

  #error-message {
    display: none;
    color: #e74c3c;
    font-weight: bold;
  }
</style>

<RootElement class="px-5 sm:px-12 w-full">
  <div id="question" class="lg:max-w-5xl">
    <!-- Add mx-auto class to center the question block -->
    <div class="flex items-center flex-col sm:flex-row space-x-6 space-y-4">
      <img
        src="./profile-58-male.png"
        alt="Profile Picture"
        class="w-28 h-28 rounded-sm animate__animated animate__fadeIn"
      />
      <div class="question_text">{question.clinicalScenario}</div>
    </div>

    <br />
    <div class="question_text_sub">{question.question}</div>
    <form id="answers" action="/" method="POST">
      {
        question.options.map((option, i) => (
          <div>
            <input
              type="radio"
              id={"a" + option.id}
              name="goal"
              value={option.id}
              tabindex={i}
              checked={answer === option.id || incorrectAnswer === option.id}
              disabled={answer !== null || incorrectAnswer !== null}
            />
            <label
              id={
                option.id === answer
                  ? "al_answer"
                  : option.id === incorrectAnswer
                    ? "al_incorrect"
                    : "al" + option.id
              }
              for={"a" + option.id}
            >
              {option.text}
            </label>
            {option.id === answer && !incorrectAnswer && (
              <span> - Correct!</span>
            )}
            {option.id === incorrectAnswer && <span> - Incorrect</span>}
          </div>
        ))
      }

      {
        !answer && !incorrectAnswer && (
          <button
            class="animate__animated animate__bounce"
            id="submit"
            type="submit"
            tabindex={question.options.length}
          >
            Submit
          </button>
        )
      }

      {
        (answer || incorrectAnswer) && (
          <div class="mt-4 mb-24">
            <h2>Rationale:</h2>
            <h3 class="rational question_text animate__animated animate__fadeIn">
              {question.rationale[incorrectAnswer || answer || ""]}
            </h3>
            <h2 class="mt-4">Next Steps</h2>
            <ul>
              {question.nextSteps.map((step) => (
                <li>{step}</li>
              ))}
            </ul>

            <button
              id="submit"
              type="button"
              class=""
              onclick="window.location.reload();"
            >
              Next
            </button>
          </div>
        )
      }
    </form>
    <p id="error-message">Please select an answer before submitting.</p>
  </div>
</RootElement>

<script>
  RootElement.ready(($, ctx) => {
    const form = document.querySelector("form");
    const errorMessage = document.getElementById(
      "error-message",
    ) as HTMLElement;

    form?.addEventListener("submit", (event) => {
      const selectedOption = form.querySelector('input[name="goal"]:checked');

      if (!selectedOption) {
        event.preventDefault();
        errorMessage.style.display = "block";
      } else {
        errorMessage.style.display = "none";
      }
    });
  });
</script>
