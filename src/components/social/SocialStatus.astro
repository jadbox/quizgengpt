---
import { listenKeys } from "nanostores";
import { Comment, supabase, supabaseServer } from "../../lib/supabase";
// console.log("SocialStatus", Astro.props.comments);

const { data: nearBy, error } = await supabase.rpc("get_nearest_profiles", {
  // user_location: userLocation,
  user_id: Astro.props.uid,
  limit_count: 10,
});

if (error) {
  console.error("Error fetching messages:", error);
}

let people = nearBy || []; //  || [
//   {
//     id: "123",
//     username: "joe",
//     last_post: "2024-02-14 12:00:00",
//     status: "Reading, Gym",
//     distance: 3.414,
//     reactions: 1,
//     goals: "goal1, goal2, goal3",
//   },
// ];

// populate goals from each profile in comments list
const ids = people.map((p: any) => p.id); // ids [ "3bf547ef-150c-4195-8818-4fc1c1b25667", "0bbf6034-091b-4370-829d-31c67a8754aa" ]

if (!supabaseServer) throw new Error("supabaseServer not found");
const goalsMatchingEachCommentProfileQ = await supabaseServer
  .from("goals")
  .select("goal, id, uid, completed, started")
  //.eq("profiles.id", "goals.id")
  .in("uid", ids)
  // not older than 24 hours
  .gt(
    "created_at",
    new Date(Date.now() - 1000 * 60 * 60 * 24 * 1).toISOString()
  );

people.forEach((p: any) => {
  const m = goalsMatchingEachCommentProfileQ.data?.filter(
    (profilegoal: any) => profilegoal.uid === p.id
  );

  const goalsDone =
    m
      ?.filter((x) => x.completed !== null)
      .map((goal: any) => "✔️ " + goal.goal) || [];

  const goalsStarted =
    m
      ?.filter((x) => x.started !== null && x.completed === null)
      .map((goal: any) => "⏰ " + goal.goal) || [];

  // use emooji empty check box if goal is not started
  const goalsNotStarted =
    m
      ?.filter((x) => x.started === null)
      .map((goal: any) => "⭕ " + goal.goal) || [];

  p.goals = goalsDone.concat(goalsStarted).concat(goalsNotStarted).join(", ");
});

const commentsFormatted = people;
---

<div
  class="glassmorphism w-full md:w-2/3 bg-gray-900 p-4 rounded-xl mt-5 mb-2 overflow-y-visible"
>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
    {
      commentsFormatted.map((comment: any) => (
        <div class="bg-gray-800 rounded-lg p-4 shadow-md hover:shadow-lg transition-shadow duration-300">
          <div class="flex items-center mb-2">
            <div class="w-10 h-10 bg-gray-700 rounded-full flex items-center justify-center mr-3">
              <span class="text-xl text-white">
                {comment.username.charAt(0).toUpperCase()}
              </span>
            </div>
            <h3 class="text-lg font-semibold text-white">{comment.username}</h3>
          </div>
          <div class="space-y-2">
            <p class="text-sm font-medium text-green-400">{comment.status}</p>
            <p class="text-sm text-gray-300">
              <span class="font-semibold">Distance:</span>{" "}
              {Number(comment.distance.toFixed(1))}mi
            </p>
            <p class="text-sm text-gray-300">
              <span class="font-semibold">Goals:</span> {comment.goals}
            </p>
          </div>
        </div>
      ))
    }
  </div>
</div>
