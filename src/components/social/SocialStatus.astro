---
import { listenKeys } from "nanostores";
import { Comment, supabase, supabaseServer } from "../../lib/supabase";
// console.log("SocialStatus", Astro.props.comments);

const { data: nearBy, error } = await supabase.rpc("get_nearest_profiles", {
  // user_location: userLocation,
  user_id: Astro.props.uid,
  limit_count: 10,
});

if (error) {
  console.error("Error fetching messages:", error);
}

let people = nearBy || []; //  || [
//   {
//     id: "123",
//     username: "joe",
//     last_post: "2024-02-14 12:00:00",
//     status: "Reading, Gym",
//     distance: 3.414,
//     reactions: 1,
//     goals: "goal1, goal2, goal3",
//   },
// ];

// populate goals from each profile in comments list
const ids = people.map((p: any) => p.id);

if (!supabaseServer) throw new Error("supabaseServer not found");
const goalsMatchingEachCommentProfileQ = await supabaseServer
  .from("goals")
  .select("goal, id, uid, completed, started")
  //.eq("profiles.id", "goals.id")
  .in("uid", ids)
  // not older than 1 week
  .gt("created_At", new Date(Date.now() - 1000 * 60 * 60 * 24 * 1));

// console.log(
//   ids,
//   "goalsMatchingEachCommentProfileQ",
//   goalsMatchingEachCommentProfileQ
// );

people.forEach((p: any) => {
  const m = goalsMatchingEachCommentProfileQ.data?.filter(
    (profilegoal: any) => profilegoal.uid === p.id
  );

  // add completed checkmark emoji if goal is completed
  const goalsDone =
    m
      ?.filter((x) => x.completed === null)
      .map((goal: any) => "✔️ " + goal.goal) || [];

  const goalsStarted =
    m
      ?.filter((x) => x.started !== null && x.completed === null)
      .map((goal: any) => "⏰ " + goal.goal) || [];

  // use emooji empty check box if goal is not started
  const goalsNotStarted =
    m
      ?.filter((x) => x.started === null)
      .map((goal: any) => "⭕ " + goal.goal) || [];

  p.goals = goalsDone.concat(goalsStarted).concat(goalsNotStarted).join(", ");
});

const commentsFormatted = people;
// .map((comment) => ({
//   name: comment.content.split(" ")[0],
//   status: comment.profiles.username,
//   activity: comment.activity,
//   reactions: 0,
// }));
---

<table
  class="glassmorphism w-full md:w-2/3 space-y-6 bg-gray-900 p-4 rounded-xl mt-5 mb-2 overflow-y-auto max-h-[50vh]"
>
  <thead>
    <tr>
      <th class="text-left text-green-400">Name</th>
      <th class="text-left text-green-400">Status</th>
      <th class="text-left text-green-400">Distance</th>
      <th class="text-left text-green-400">Goals</th>
    </tr>
  </thead>
  <tbody>
    {
      commentsFormatted.map((comment: any) => (
        <tr>
          <td class="text-left text-gray-200">{comment.username}</td>
          <td class="text-left text-gray-200">{comment.status}</td>
          <td class="text-left text-gray-200">
            {Number(comment.distance.toFixed(1))}
          </td>
          <td class="text-left text-gray-200">{comment.goals}</td>
        </tr>
      ))
    }
  </tbody>
</table>
