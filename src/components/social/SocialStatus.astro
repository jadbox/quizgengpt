---
import { listenKeys } from "nanostores";
import { Comment, supabase, supabaseServer } from "../../lib/supabase";
// console.log("SocialStatus", Astro.props.comments);

const { data: nearBy, error } = await supabase.rpc("get_nearest_profiles2", {
  // user_location: userLocation,
  user_id: Astro.props.uid,
  limit_count: 10,
});

if (error) {
  console.error("Error fetching messages:", error);
}

let people = nearBy || []; //  || [
//   {
//     id: "123",
//     username: "joe",
//     last_post: "2024-02-14 12:00:00",
//     status: "Reading, Gym",
//     distance: 3.414,
//     reactions: 1,
//     goals: "goal1, goal2, goal3",
//   },
// ];

// populate goals from each profile in comments list
const ids = people.map((p: any) => p.id); // ids [ "3bf547ef-150c-4195-8818-4fc1c1b25667", "0bbf6034-091b-4370-829d-31c67a8754aa" ]

if (!supabaseServer) throw new Error("supabaseServer not found");
const goalsMatchingEachCommentProfileQ = await supabaseServer
  .from("goals")
  .select("goal, id, uid, completed, started, created_at")
  //.eq("profiles.id", "goals.id")
  .in("uid", ids)
  // not older than 24 hours
  // .gt(
  //   "created_at",
  //   new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString()
  // )
  .order("completed", { ascending: false })
  .limit(12);

const goalNum = goalsMatchingEachCommentProfileQ.data?.length || 0;

people.forEach((p: any) => {
  const m = goalsMatchingEachCommentProfileQ.data?.filter(
    (profilegoal: any) => profilegoal.uid === p.id
  );

  // limit to 3
  const goalsDone =
    m
      ?.filter((x) => x.completed !== null)
      .map((goal: any) => "✔️ " + goal.goal) || [];

  const goalsStarted =
    m
      ?.filter((x) => x.started !== null && x.completed === null)
      .map((goal: any) => "⏰ " + goal.goal) || [];

  // use emooji empty check box if goal is not started
  const goalsNotStarted =
    m
      ?.filter((x) => x.started === null)
      .map((goal: any) => "⭕ " + goal.goal) || [];

  p.goals = goalsStarted.concat(goalsNotStarted).concat(goalsDone).join(", ");
});

const uid = Astro.props.uid;

// ensure my uid profile is first
let userIndex = people.findIndex((p) => p.id === Astro.props.uid);
if (userIndex !== -1) {
  people.unshift(people.splice(userIndex, 1)[0]);
  userIndex = 0;
}

const commentsFormatted = people;
---

<RootElement data={{ uid }}>
  <div
    class="glassmorphism w-full md:w-2/3 bg-gray-900 p-4 rounded-xl mt-5 mb-2 overflow-y-visible"
  >
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
      {
        commentsFormatted.map((comment: any, i: number) => (
          <div
            class={`bg-gray-800 rounded-lg p-4 shadow-md hover:shadow-lg transition-shadow duration-300 ${comment?.id === uid ? "border-2 border-green-500" : ""}`}
          >
            <div class="flex items-center mb-2">
              <div class="w-10 h-10 bg-gray-700 rounded-full flex items-center justify-center mr-3">
                <span class="text-xl text-white">
                  {comment.username.charAt(0).toUpperCase()}
                </span>
              </div>
              )
              <h3 class="text-lg font-semibold text-white">
                {comment.username}
              </h3>
            </div>
            <div class="space-y-2">
              <p class="text-sm font-medium text-green-400">{comment.status}</p>
              <p class="text-sm text-gray-300">
                <span class="font-semibold">Distance:</span>{" "}
                {comment.distance === null
                  ? "??"
                  : `${Number(comment.distance?.toFixed(1)) || "0.5"}mi`}
              </p>
              <p class="text-sm text-gray-300">
                <span class="font-semibold">Goals:</span> {comment.goals}
              </p>
              <div class="flex items-center justify-center space-x-2m mt-4 space-x-2">
                <a
                  href={`mailto:${encodeURI(comment.email)}?subject=TT Re:${encodeURI(comment.status)}&body=${encodeURI("Hello, I am responding to your message on ThriveTogether.xyz Weekly Bulletin Board.")}`}
                >
                  <button
                    class="flex items-center justify-center bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg mt-2 text-sm"
                    data-target="email-click"
                  >
                    <span class="material-icons mr-2">email</span> Reply
                  </button>
                </a>
                {i === userIndex && (
                  <button
                    class="flex items-center justify-center bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg mt-2 text-sm"
                    data-target="delete-click"
                  >
                    <span class="material-icons">delete</span>
                  </button>
                )}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</RootElement>

<script>
  import { supabase } from "../../lib/supabase";
  import { navigate } from "astro:transitions/client";
  RootElement.ready(($, ctx) => {
    console.log("ready");
    $("delete-click").addEventListener("click", async (e) => {
      e.preventDefault();
      const r = await confirm("Are you sure you want to delete your status?");
      if (!r) return;

      const uid = ctx.data.uid;
      if (!uid) throw new Error("uid not found");

      await supabase.from("profiles").update({ status: null }).eq("id", uid);

      const { data: messages, error } = await supabase
        .from("messages")
        .delete()
        .eq("profile_id", uid)
        .like("content", "%: %")
        .gt(
          "created_at",
          new Date(Date.now() - 1000 * 60 * 60 * 24 * 1).toISOString()
        );

      if (error) {
        console.error("Error deleting messages:", error);
        alert("Error deleting messages:" + error.message);
        return;
      }

      navigate("/");
    });
  });
</script>
