---
import { setAstroSession, Profile } from "@/lib/supabase";
import EmojiSection from "./EmojiSection.astro";
import ActivitySelector from "./ActivitySelector.astro";
import SocialStatus from "./social/SocialStatus.astro";
// import { extract } from "oembed-parser";
// populate comments from supabase message table with content field

const { supabase, user } = await setAstroSession(Astro.cookies);

// newer than 24hrs
const { data, error } = await supabase
  .from("messages")
  .select("content, profile_id, created_at, id")
  .gte("created_at", new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
  .limit(10)
  .order("created_at", { ascending: false });
// .order("created_at", { ascending: false })
// .gte("created_at", new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
// .order("messages(created_at)", { ascending: false });

if (error) {
  console.error("Error fetching messages:", error);
}

var comments = data || [];

// console.log("comments", comments);

const { cookies, redirect } = Astro;
const uid = user?.user?.id as string; //cookies.get("uid")?.value || "";

const name = cookies.get("name")?.value || "";

// Function to detect image URL in the post body
const detectImageUrl = (text: string): string | null => {
  const urlRegex = /(https?:\/\/.*\.(?:png|jpg|jpeg|gif|webp|webm))/i;
  const match = text.match(urlRegex);
  return match ? (match[0] as string) : null;
};

// detect link url intest
const detectLinkUrl = (text: string) => {
  const urlRegex = /(https?:\/\/[^\s]+)/g;
  const match = text.match(urlRegex);
  return match ? match[0] : null;
};

const _comments = comments.map((comment) => {
  // const imageUrl = detectImageUrl(comment.content);
  // const link = !imageUrl && detectLinkUrl(comment.content);
  // if (imageUrl) comment.content = comment.content.replace(imageUrl, "");
  // else {
  //   if (link) {
  //     comment.content = comment.content.replace(link, "");
  //   }
  // }
  return comment;
});

// get all user infos
// const uniqueCommentUids = new Set<string>();
// comments.forEach((comment) => {
//   uniqueCommentUids.add(comment.profile_id);
// });

// const {data: locationData} = await supabase
//   .from("profiles")
//   .select("location")
//   .eq("uid", uid).single();
// const location = locationData?.location;

// // use supabase to get location of each user by uid and get the instance from this user's uid
// const { data: profiles, error: profilesError } = await supabase
//   .from("profiles")
//   .select("*")
//   .in("uid", Array.from(uniqueCommentUids));

// if (profilesError) {
//   console.error("Error fetching profiles:", profilesError);
// }

// const profileMap = new Map<string, Profile>();
// profiles?.forEach((profile) => {
//   profileMap.set(profile.id, profile);
// });
---

<RootElement data={{ name, uid }}>
  <div class="flex flex-col items-center justify-center max-h-screen pt-4">
    <!-- <h1 class="text-xl font-bold text-green-400">Set current mood:</h1> -->

    <h1 class="text-xl font-bold text-green-400">People nearby:</h1>

    <!--<h1 class="text-xl font-bold text-green-400">Set your status:</h1>
     <ActivitySelector feelings="true" /> -->

    <!-- <SocialStatus comments={comments} /> -->

    <div class="flex-center flex-col w-full">
      <input
        data-uid={uid}
        type="text"
        placeholder="Offer inspiration, request help, or offer support..."
        class="w-full md:w-2/3 p-2 mt-2 mb-4 border border-green-400 rounded-lg bg-gray-800 text-gray-200 placeholder-gray-500"
        id="messageInput"
      />
      <button class="black_btn w-1/3 md:h-full md:w-1/5" id="handleSubmitBtn">
        submit
      </button>
    </div><br />

    <div
      class="glassmorphism w-full md:w-2/3 space-y-6 bg-gray-900 p-4 rounded-xl mt-5 mb-2 overflow-y-auto max-h-[50vh]"
      id="commentbox"
    >
      {
        _comments.map((comment) => {
          const isUserMessage = comment.profile_id === uid;
          const formattedDate = new Date(comment.created_at).toLocaleString();
          return (
            <div class="flex-center flex-col">
              <p
                class={`${
                  isUserMessage
                    ? "bg-blue-700 text-slate-200 self-end"
                    : "bg-gray-700 text-gray-200 self-start"
                } p-2 rounded-lg max-w-xs break-words`}
              >
                {comment.content}
                {comment.imageUrl && (
                  <a href={comment.imageUrl} target="_blank">
                    <img
                      src={comment.imageUrl}
                      alt="Shared image"
                      class="w-full max-w-32 h-auto object-cover rounded-lg shadow-md mb-2"
                    />
                  </a>
                )}
                {comment.link && (
                  <a
                    href={comment.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-blue-400 underline"
                  >
                    {comment.link}
                  </a>
                )}
                <>
                  <br />
                  <span class="text-xs text-gray-500 mt-1">
                    {formattedDate}
                  </span>
                </>
                {/* <EmojiSection id={comment.id} /> */}
              </p>
            </div>
          );
        })
      }
    </div>
  </div>

  <script>
    import "@/scripts/emoji-reactions.js";
  </script>
  <script>
    import { supabase } from "@/lib/supabase";
    import { navigate } from "astro:transitions/client";
    import { getAndSaveLocation } from "@/scripts/getAndSaveLocation";

    RootElement.ready(($, ctx) => {
      function makeComment(comment: string) {
        navigate("/");
      }

      const handleInserts = (payload: any) => {
        console.log("payload", payload);
        const newComment = payload.new.content;
        const el = document.getElementById("commentbox");
        makeComment(newComment);
        // if (el) el.innerHTML = +el.innerHTML;
      };

      const handleSubmit = async () => {
        const input = document.getElementById(
          "messageInput"
        ) as HTMLInputElement;

        if (!input.value) return;
        const message = `${ctx.data.name}: ${input.value}`;

        const uid = input.getAttribute("data-uid")?.toString();
        // console.log("{ content: message, profile_id: uid }", {
        //   content: message,
        //   profile_id: uid,
        // });

        if (message) {
          const { data, error } = await supabase
            .from("messages")
            .insert([{ content: message, profile_id: uid }]);

          // update last_post in profiles table
          await supabase
            .from("profiles")
            .update({ last_post: new Date().toISOString() })
            .match({ id: uid });

          if (error) {
            console.error("Error inserting message:", error);
          } else {
            console.log("Message inserted successfully:", data);
            input.value = "";
            // makeComment(message);
          }
        }
      };

      // Handle Submit button click
      const submitButton = document.getElementById(
        "handleSubmitBtn"
      ) as HTMLButtonElement;

      if (!submitButton) throw new Error("submitButton for comments not found");

      submitButton.addEventListener("click", handleSubmit);

      const input = document.getElementById("messageInput") as HTMLInputElement;
      if (!input) throw new Error("input not found");

      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          const input = document.getElementById(
            "messageInput"
          ) as HTMLInputElement;
          const message = input.value;

          if (message) handleSubmit();
        }
      });

      // Subscribe to messages channel
      supabase
        .channel("messages-insert")
        .on(
          "postgres_changes",
          { event: "INSERT", schema: "public", table: "messages" },
          handleInserts
        )
        .subscribe();

      supabase
        .channel("messages-update")
        .on(
          "postgres_changes",
          { event: "UPDATE", schema: "public", table: "messages" },
          handleInserts
        )
        .subscribe();
      console.log("subscribed to messages channel");

      // Get and save location when the page loads
      getAndSaveLocation(ctx.data.uid, document);
    });
  </script>
</RootElement>
