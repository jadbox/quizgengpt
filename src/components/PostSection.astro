---
import { supabase } from "@/lib/supabase";

let comments: { content: string; profile_id: string }[] = [
  // "YOU CAN DO IT! -Jessica",
  // "I FINISHED MY GYM GOAL -Larry",
  // "I'll be so glad to get to the gym today after work -Joe",
  // "You're going to enjoy that run and buy a nice healthy snack soon at the store!",
];

// populate comments from supabase message table with content field

// newer than 24hrs
const { data, error } = await supabase
  .from("messages")
  .select("content, profile_id")
  .gte("created_at", new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
  .limit(20)
  .order("created_at", { ascending: false });

if (error) {
  console.error("Error fetching messages:", error);
} else {
  comments = data.map((message) => message);
}

const { cookies, redirect } = Astro;
const uid = cookies.get("uid")?.value || "";

const name = cookies.get("name")?.value || "";
---

<RootElement data={{ name, uid }}>
  <div class="flex flex-col items-center justify-center max-h-screen pt-4">
    <h1 class="text-xl font-bold text-green-400">Shared goals chat</h1>
    <div
      class="glassmorphism w-full md:w-2/3 space-y-6 bg-gray-900 p-4 rounded-xl mt-5 mb-2 overflow-y-auto max-h-[50vh]"
      id="commentbox"
    >
      {
        comments.map((comment, index) => {
          const isUserMessage = comment.profile_id === uid;
          return (
            <div class="flex-center flex-col">
              <p
                class={`${
                  isUserMessage
                    ? "bg-blue-700 text-slate-200 self-end"
                    : "bg-gray-700 text-gray-200 self-start"
                } p-2 rounded-lg max-w-xs break-words`}
              >
                {comment.content}
              </p>
            </div>
          );
        })
      }
    </div>
    <div class="flex-center flex-col w-full space-y-4">
      <input
        data-uid={uid}
        type="text"
        placeholder="Type to inspire others..."
        class="w-full md:w-2/3 p-2 mt-2 mb-4 border border-green-400 rounded-lg bg-gray-800 text-gray-200 placeholder-gray-500"
        id="messageInput"
      />
      <button class="black_btn w-1/3 md:h-full md:w-1/5" id="handleSubmitBtn">
        submit
      </button>
      <button class="outline_btn w-1/4 md:h-full md:w-1/6" id="handleResetBtn"
        >reset</button
      >
    </div>
  </div>

  <script>
    import { supabase } from "@/lib/supabase";
    import { navigate } from "astro:transitions/client";

    RootElement.ready(($, ctx) => {
      const handleInserts = (payload: any) => {
        console.log("payload", payload);
        const newComment = payload.new.content;
        const el = document.getElementById("commentbox");
        if (el) el.innerHTML += `<p class="text-green-400">${newComment}</p>`;
      };

      const handleSubmit = async () => {
        const input = document.getElementById(
          "messageInput"
        ) as HTMLInputElement;

        if (!input.value) return;
        const message = `${ctx.data.name}: ${input.value}`;

        const uid = input.getAttribute("data-uid")?.toString();
        // console.log("{ content: message, profile_id: uid }", {
        //   content: message,
        //   profile_id: uid,
        // });

        if (message) {
          const { data, error } = await supabase
            .from("messages")
            .insert([{ content: message, profile_id: uid }]);
          if (error) {
            console.error("Error inserting message:", error);
          } else {
            console.log("Message inserted successfully:", data);
            input.value = "";
          }
        }
      };

      // Handle Submit button click
      const submitButton = document.getElementById(
        "handleSubmitBtn"
      ) as HTMLButtonElement;

      if (!submitButton) throw new Error("submitButton for comments not found");

      submitButton.addEventListener("click", handleSubmit);

      const input = document.getElementById("messageInput") as HTMLInputElement;
      if (!input) throw new Error("input not found");

      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          const input = document.getElementById(
            "messageInput"
          ) as HTMLInputElement;
          const message = input.value;

          if (message) handleSubmit();
        }
      });

      // Handle Reset button click
      const resetButton = document.getElementById(
        "handleResetBtn"
      ) as HTMLButtonElement;
      resetButton.addEventListener("click", async () => {
        // are you sure?
        if (!confirm("Are you sure you want to delete all your goals?")) return;

        const input = document.getElementById(
          "messageInput"
        ) as HTMLInputElement;
        const uid = input.getAttribute("data-uid") || "";

        // delete uncompleted goals
        const { data, error } = await supabase
          .from("goals")
          .delete()
          .eq("uid", uid)
          .is("completed", null);

        // window.location.href = "/";
        navigate("/");
      });

      // Subscribe to messages channel
      supabase
        .channel("messages-insert")
        .on(
          "postgres_changes",
          { event: "INSERT", schema: "public", table: "messages" },
          handleInserts
        )
        .subscribe();

      supabase
        .channel("messages-update")
        .on(
          "postgres_changes",
          { event: "UPDATE", schema: "public", table: "messages" },
          handleInserts
        )
        .subscribe();
      console.log("subscribed to messages channel");
    });
  </script>
</RootElement>
