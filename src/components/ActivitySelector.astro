---
import { ActivityList, FEELINGS } from "../scripts/globals";

const activities: ActivityList = Astro.props.activities || FEELINGS;
---

<style>
  .aq {
    animation: fadeIn 1.2s;
    --animate-duration: 0.2s;
  }

  .activity-icon {
    transition: border-color 0.3s ease;
  }

  .split-hover-bg {
    transition: transform 0.3s ease;
    transform: translateX(-103%);
  }

  .split-hover-bg::before,
  .split-hover-bg::after {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    width: 50%;
  }

  .split-hover-bg::before {
    left: 0;
    background-color: #7cd3fc;
  }

  .split-hover-bg::after {
    right: 0;
    background-color: #fef9c3; /* Tailwind rose-400 */
  }

  .activity-item:hover .split-hover-bg {
    transform: translateX(0);
  }

  .activity-item:hover .activity-icon {
    border-color: #e2e8f0;
  }

  .activity-item:hover .material-icons {
    color: black;
  }
</style>

<RootElement>
  <div class="grid grid-cols-4 gap-4 mb-4 md:grid-cols-5 mt-4 aq">
    {
      activities.map((activity) => (
        <div
          class="flex rounded flex-col items-center text-center text-slate-300 cursor-pointer activity-item"
          data-activity={activity.val || activity.label}
        >
          <div class="w-16 h-16 flex items-center justify-center rounded-full mb-2 border-2 border-gray-700 bg-gray-900 activity-icon relative overflow-hidden">
            <span class="material-icons text-3xl relative z-10">
              {activity.icon}
            </span>
            <div class="absolute inset-0 split-hover-bg" />
          </div>
          <p class="text-s font-semibold text-black">{activity.label}</p>
        </div>
      ))
    }
  </div>
</RootElement>
<script>
  import { selectedActivities } from "@/scripts/store.js";

  // Activity Selector Logic
  var selected: string[] = [];

  RootElement.ready(($, ctx) => {
    selected = [];

    const activityItems =
      document.querySelectorAll<HTMLElement>(".activity-item");

    activityItems.forEach((activityItem) => {
      activityItem.addEventListener("click", (event) => {
        const activity = (event.currentTarget as HTMLElement).getAttribute(
          "data-activity",
        );
        //console.log(activity);

        activityItem.classList.toggle("bg-blue-500");
        activityItem.classList.toggle("rounded-xl");
        activityItem.classList.toggle("text-white");
        activityItem.classList.toggle("animate__animated");
        activityItem.classList.toggle("animate__pulse");

        // update selected activities for all animate__animated items
        selected = Array.from(
          document.querySelectorAll(".activity-item.animate__animated"),
        ).map(
          (item) => (item as HTMLElement).getAttribute("data-activity") || "",
        );

        // console.log("selected", selected);

        // Set activities to the store
        selectedActivities.set(selected);
        //console.log(selectedActivities.get());
      });
    });

    // Set activities to the store
    selectedActivities.set(selected);
  });
</script>
