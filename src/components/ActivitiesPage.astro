---
import ActivitySelector from "./ActivitySelector.astro";
const uid = Astro.cookies.get("uid")?.value || "";
const name = Astro.cookies.get("name")?.value || "";
---

<style>
  @import "../styles/animated-border.css";
</style>

<RootElement data={{ name, uid }}>
  <div class="max-h-screen flex flex-col items-center py-8 space-y-10">
    <h1 class="text-2xl uppercase mb-4 text-black font-semibold mt-4">
      What's your plan for today?
    </h1>
    <ActivitySelector />

    <div class="comment w-[300px] h-[70px]">
      <textarea
        data-uid={uid}
        id="postfield"
        class="w-full bg-transparent border-none outline-none resize-none text-slate-400"
        placeholder="Post what inspires you today..."></textarea>
    </div>

    <div class="flex-between w-11/12 mt-2 md:w-3/4">
      <div
        class="fixed bottom-8 inset-x-0 flex flex-col items-center md:relative md:bottom-auto md:left-1/2 md:transform md:-translate-x-1/2"
      >
        <button
          id="submitButton"
          class="material-icons bg-green-400 text-black p-4 rounded-full shadow-lg text-4xl"
        >
          check
        </button>
        <p class="mt-2 text-black text-lg font-bold">Crush Goals!</p>
      </div>
    </div>
  </div>

  <script>
    import confetti from "canvas-confetti";
    import { supabase, Goal } from "@/lib/supabase";
    import { selectedActivities } from "@/scripts/store";
    import { navigate } from "astro:transitions/client";

    RootElement.ready(($, ctx) => {
      const button = document.getElementById(
        "submitButton"
      ) as HTMLButtonElement;
      if (!button) throw new Error("Activity Submit button not found");

      button.addEventListener("click", async (event: any) => {
        event.preventDefault();

        // save new message to supebase messages table for postfield content
        const postfield = document.getElementById(
          "postfield"
        ) as HTMLTextAreaElement;

        const goals = selectedActivities.value;
        if (!goals || goals.length === 0) {
          alert("Select at least one goal");
          return;
        }

        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 },
          colors: ["#ff0000", "#00ff00", "#0000ff"],
        });

        let message = `${ctx.data.name} started goals ${goals.join(", ")}`;
        if (postfield.value) message += ". " + postfield.value;

        const uid = ctx.data.uid as string; // postfield.getAttribute("data-uid")?.toString();

        if (!uid) {
          alert("User not found");
          console.log("Message:", message, "UID:", uid);
          return;
        }

        // disable button
        button.disabled = true;
        button.classList.add("opacity-50");

        // if (message) {
        const c = await supabase
          .from("messages")
          .insert([{ content: message, profile_id: uid }]);

        // log any errors
        if (c.error) {
          alert("Error inserting message: " + c.error.message);
          console.error("Error inserting message:", c.error);
          button.disabled = false;
          button.classList.remove("opacity-50");
          return;
        } else {
          console.log("Message inserted successfully:", c.data);
          postfield.value = "";
        }
        //}

        console.log("selectedActivities", selectedActivities.value); // ex ['clean']
        // save into Supabase goals table where each goal is a row
        // and each activity is a column
        // and the value is the count of the activity

        if (goals && uid) {
          console.log("uid", uid);
          // delete current uncompoleted goals
          const r = await supabase
            .from("goals")
            .delete()
            .match({ uid })
            .is("completed", null);

          if (r.error) {
            button.disabled = false;
            button.classList.remove("opacity-50");

            alert("Error deleting goals:" + r.error.message);
            console.error("Error deleting goals:", r.error);
            return;
          } else {
            console.log("Deleted goals:", r.data);
          }
          // Refactor the above loop to be a single query transactions
          console.log("uid", uid);
          const re = await supabase
            .from("goals")
            .insert(goals.map((goal) => ({ uid, goal })));
          // .select();

          if (re.error) {
            alert("Error inserting goals:" + re.error.message);
            console.error("Error inserting goals:", re.error.message);
            return;
          }
          // console.log("Goals inserted:", goals, JSON.stringify(re.data));
        }
        // return;

        // Redirect to goals page after 1 second
        setTimeout(() => {
          navigate("/", { history: "replace" });
        }, 900);
      });

      // console.log("RootElement ready", ctx);
    });
  </script>
</RootElement>
