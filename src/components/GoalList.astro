---
import GoalItem from "./GoalItem.astro";
import { Goal, setAstroSession } from "../lib/supabase";

const { supabase, data } = await setAstroSession(Astro.cookies);
const uid = data?.user?.id;
const name = Astro.cookies.get("name")?.value;

// get goals created on this day
const { data: goals, error } = await supabase
  .from("goals")
  .select("*")
  .match({ uid })
  // .is("completed", null) // TODO: remove
  .gte("created_at", new Date().toISOString().split("T")[0])
  .order("id", { ascending: true });

if (error) {
  console.error("Error fetching goals:", error);
  return Response.json({ error: "Error fetching goals" });
}
---

<style>
  @import "../styles/animated-border.css";
</style>

<RootElement data={{ uid }}>
  <div class="flex flex-col items-center p-4 space-y-4">
    <user id="user" uid={uid} class="hidden"></user>
    <div class="flex items-center p-4 space-x-2">
      <h1 class="text-2xl font-bold text-black flex">{name} Goals Today</h1>
    </div>
    <div class="bg-gray-800 p-4 rounded-lg space-y-4 w-full md:w-2/3 comment">
      <div class="container space-y-4" id="goalContainer">
        <!-- Activities will be rendered here -->
        {goals.map((goal: Goal) => <GoalItem goal={goal} />)}
      </div>

      <div class="flex mx-auto center-text" title="Reset today's goals">
        <a href="#" data-target="returnico" class="flex">
          <button
            class="bg-gray-800 text-sm hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-full"
          >
            Update Goals
          </button>
        </a>
      </div>
    </div>
  </div>
</RootElement>
<script>
  import { navigate } from "astro:transitions/client";
  import { supabase } from "../lib/supabase";

  RootElement.ready(($, ctx) => {
    $("returnico").addEventListener("click", async function (e) {
      e.preventDefault();
      // are you sure?
      if (
        !confirm(
          "Are you sure you want to reset today's incompleted goals? You'll keep all your completed goals."
        )
      )
        return;

      const uid = ctx.data.uid as string;

      $<HTMLButtonElement>("returnico").disabled = true;
      $("returnico").classList.add("cursor-not-allowed"); // alpha
      $("returnico").classList.add("alpha-50"); // alpha

      if (!uid) {
        alert("User not found");
        return;
      }

      // delete uncompleted goals
      const { data, error } = await supabase
        .from("goals")
        .delete()
        .eq("uid", uid)
        .is("completed", null);

      if (error) {
        console.error("Error deleting goals", error);
        alert("Error deleting goals");
        return;
      }

      window.location.href = "/"; // do a full refresh for reset
    });
  });
</script>
