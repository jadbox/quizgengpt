---
const uid = Astro.cookies.get("uid")?.value;
---

<div class="flex flex-col items-center p-4 space-y-4 text-slate-200">
  <user id="user" uid={uid} class="hidden"></user>
  <h1 class="text-2xl font-bold text-green-400">Today's goal list</h1>
  <div class="bg-gray-800 p-4 rounded-lg space-y-4 w-full md:w-2/3">
    <div class="container space-y-4" id="goalContainer">
      <!-- Activities will be rendered here -->
    </div>
  </div>
</div>

<script>
  import { supabase } from "../lib/supabase";

  const uid = document.getElementById("user")?.getAttribute("uid");
  if (!uid) throw new Error("no uid");

  async function fetchGoals() {
    const { data: goals, error } = await supabase
      .from("goals")
      .select("*")
      .match({ uid });

    if (error) {
      console.error("Error fetching goals:", error);
      return [];
    }
    return goals || [];
  }

  function formatDuration(start: string, end: string | null): string {
    if (!start) return "00:00:00";
    const startTime = new Date(start).getTime();
    const endTime = end ? new Date(end).getTime() : Date.now();
    const duration = Math.floor((endTime - startTime) / 1000);
    const hours = Math.floor(duration / 3600);
    const minutes = Math.floor((duration % 3600) / 60);
    const seconds = duration % 60;
    return [hours, minutes, seconds]
      .map((val) => val.toString().padStart(2, "0"))
      .join(":");
  }

  function createGoalElement(goal: any) {
    const goalElement = document.createElement("div");
    goalElement.className =
      "flex justify-between items-center p-2 border border-green-400 rounded-lg";
    goalElement.innerHTML = `
      <span class="capitalize text-green-400">${goal.goal}</span>
      <span id="stopwatch-${goal.id}" class="text-green-400">
        ${formatDuration(goal.started, goal.completed)}
      </span>
      <button class="bg-gray-700 text-green-400 border border-green-400 px-2 py-1 rounded-lg">
        ${goal.started && !goal.completed ? "(stop)" : goal.completed ? "(restart)" : "(start)"}
      </button>
    `;

    const updateStopwatch = () => {
      const watch = goalElement.querySelector(`#stopwatch-${goal.id}`);
      if (watch) {
        watch.textContent = formatDuration(goal.started, goal.completed);
      }
    };

    const toggleGoal = async () => {
      const btn = goalElement.querySelector("button");
      if (!btn) return;

      if (goal.started && !goal.completed) {
        // Stop the goal
        const { data, error } = await supabase
          .from("goals")
          .update({ completed: new Date().toISOString() })
          .match({ id: goal.id })
          .select();

        if (error) {
          console.error("Error completing goal:", error);
          return;
        }

        goal.completed = data[0].completed;
        btn.textContent = "(restart)";
      } else {
        // Start or restart the goal
        const { data, error } = await supabase
          .from("goals")
          .update({ started: new Date().toISOString(), completed: null })
          .match({ id: goal.id })
          .select();

        if (error) {
          console.error("Error starting/restarting goal:", error);
          return;
        }

        goal.started = data[0].started;
        goal.completed = null;
        btn.textContent = "(stop)";
      }

      updateStopwatch();
    };

    goalElement.querySelector("button")?.addEventListener("click", toggleGoal);

    return goalElement;
  }

  async function renderGoals() {
    const goals = await fetchGoals();
    const goalContainer = document.getElementById("goalContainer");
    if (!goalContainer) throw new Error("no goalContainer");

    goalContainer.innerHTML = "";
    goals.forEach((goal) => {
      const goalElement = createGoalElement(goal);
      goalContainer.appendChild(goalElement);
    });

    // Start interval for running goals
    setInterval(() => {
      goals.forEach((goal) => {
        if (goal.started && !goal.completed) {
          const watch = document.querySelector(`#stopwatch-${goal.id}`);
          if (watch) {
            watch.textContent = formatDuration(goal.started, null);
          }
        }
      });
    }, 1000);
  }

  renderGoals();
</script>
