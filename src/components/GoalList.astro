---
import GoalItem from "./GoalItem.astro";
import { supabase, Goal } from "../lib/supabase";
const uid = Astro.cookies.get("uid")?.value;

const { data: goals, error } = await supabase
  .from("goals")
  .select("*")
  .match({ uid })
  // .is("completed", null) // TODO: remove
  .gte("created_at", new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
  .order("created_at", { ascending: true });

if (error) {
  console.error("Error fetching goals:", error);
  return Response.error("Error fetching goals");
}
---

<div class="flex flex-col items-center p-4 space-y-4 text-slate-200">
  <user id="user" uid={uid} class="hidden"></user>
  <h1 class="text-2xl font-bold text-green-400">Today's goal list</h1>
  <div class="bg-gray-800 p-4 rounded-lg space-y-4 w-full md:w-2/3">
    <div class="container space-y-4" id="goalContainer">
      <!-- Activities will be rendered here -->
      {goals.map((goal: Goal) => <GoalItem goal={goal} />)}
    </div>
  </div>
</div>

<script>
  // OLD CODE MOVING TO GoalItem
  // import { supabase, Goal } from "../lib/supabase";

  // const uid = document.getElementById("user")?.getAttribute("uid");
  // if (!uid) throw new Error("no uid");

  // let intervalId: any;

  // async function toggleGoal(goal: any, button: Element) {
  //   const now = new Date();
  //   let updatedGoal = { ...goal };

  //   goal.paused = !goal.paused;
  //   if (goal.paused) {
  //     // Pausing the goal
  //     updatedGoal.resumed = null;
  //   } else {
  //     updatedGoal.duration += Math.floor(
  //       now.getDate() -
  //         new Date(goal.resumed || goal.started_at).getDate() / 1000
  //     );
  //     // Resuming the goal
  //     updatedGoal.resumed = now.toISOString();
  //   }

  //   const { data, error } = await supabase
  //     .from("goals")
  //     .update(updatedGoal)
  //     .match({ id: goal.id })
  //     .select();

  //   if (error) {
  //     console.error("Error updating goal:", error);
  //     return;
  //   }

  //   Object.assign(goal, data[0]);
  //   button.textContent = goal.paused ? "Pause" : "Resume";
  //   updateStopwatch(goal);
  // }

  // function updateStopwatch(goal: any) {
  //   const stopwatch = document.querySelector(`#stopwatch-${goal.id}`);
  //   if (stopwatch) {
  //     let duration = goal.duration;
  //     if (goal.resumed) {
  //       duration += Math.floor(
  //         (new Date().getDate() - new Date("" + goal.resumed).getDate()) / 1000
  //       );
  //     }
  //     stopwatch.textContent = formatDuration(goal);
  //   }
  // }

  // async function renderGoals() {
  //   const goals = await fetchGoals();
  //   const goalContainer = document.getElementById("goalContainer");
  //   if (!goalContainer) throw new Error("no goalContainer");

  //   goalContainer.innerHTML = "";
  //   goals.forEach((goal) => {
  //     goalContainer.appendChild(createGoalElement(goal));
  //   });

  //   clearInterval(intervalId);
  //   intervalId = setInterval(() => {
  //     goals.forEach(updateStopwatch);
  //   }, 1000);
  // }
  // renderGoals();
</script>
